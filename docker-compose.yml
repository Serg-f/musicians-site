version: "3.8"
services:

  kong:
    build: ./gateway
    container_name: kong-container
    environment:
      KONG_LOG_LEVEL: "debug"
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "${DB_HOST}"
      KONG_PG_PORT: "${DB_PORT}"
      KONG_PG_USER: "${DB_USER}"
      KONG_PG_PASSWORD: "${DB_PASSWORD}"
      KONG_PG_DATABASE: "${DB_NAME_KONG}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PLUGINS: bundled,custom-transformer
    ports:
      - "8000:8000" # Proxy
      - "8443:8443" # Proxy SSL
      - "8001:8001" # Admin API
      - "8444:8444" # Admin API SS
    networks:
      - app-network

  users-service:
    build: ./users
    container_name: users-container
    environment:
      DEBUG: "${DEBUG}"
      SECRET_KEY: "${SECRET_KEY}"
      LOG_LEVEL: "${LOG_LEVEL}"
      DB_NAME_USERS: "${DB_NAME_USERS}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
    volumes:
      - ./users/src:/project_dir
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8020:8000"
    networks:
      - app-network

  musicians-service:
    build: ./musicians
    container_name: musicians-container
    environment:
      DEBUG: "WARNING"
      SECRET_KEY: "${SECRET_KEY}"
      LOG_LEVEL: "${LOG_LEVEL}"
      DB_NAME_MUSICIANS: "${DB_NAME_MUSICIANS}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672//"
      CELERY_RESULT_BACKEND: "rpc://"
      REDIS_URL: "redis://redis:6379/1"
      USERS_SERVICE_URL: "http://users-service:8000"
    volumes:
      - ./musicians/src:/project_dir
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8010:8000"
    depends_on:
      - redis
    networks:
      - app-network

#  frontend-service:
#    build: ./frontend
#    container_name: frontend-container
#    ports:
#      - "3000:80"
#    networks:
#      - app-network
#    depends_on:
#      - users-service
#      - musicians-service
#    volumes:
#      - ./frontend/frontend:/project_dir
#    environment:
#      REACT_APP_API_GATEWAY_URL: "http://localhost:8000"

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  celery-worker:
    build: ./musicians
    container_name: celery-worker
    command: celery -A mus_proj worker --loglevel=info
    environment:
      DEBUG: "${DEBUG}"
      SECRET_KEY: "${SECRET_KEY}"
      LOG_LEVEL: "${LOG_LEVEL}"
      DB_NAME_MUSICIANS: "${DB_NAME_MUSICIANS}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672//"
      CELERY_RESULT_BACKEND: "rpc://"
      REDIS_URL: "redis://redis:6379/1"
      USERS_SERVICE_URL: "http://users-service:8000"
    volumes:
      - ./musicians/src:/project_dir
    depends_on:
      - musicians-service
      - rabbitmq
      - redis
    networks:
      - app-network

  celery-beat:
    build: ./musicians
    container_name: celery-beat
    command: celery -A mus_proj beat --loglevel=info
    environment:
      DEBUG: "${DEBUG}"
      SECRET_KEY: "${SECRET_KEY}"
      LOG_LEVEL: "${LOG_LEVEL}"
      DB_NAME_MUSICIANS: "${DB_NAME_MUSICIANS}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672//"
      CELERY_RESULT_BACKEND: "rpc://"
      REDIS_URL: "redis://redis:6379/1"
      USERS_SERVICE_URL: "http://users-service:8000"
    volumes:
      - ./musicians/src:/project_dir
    depends_on:
      - musicians-service
      - rabbitmq
      - redis
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
